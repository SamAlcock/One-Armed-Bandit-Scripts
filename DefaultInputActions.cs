//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/One-Armed-Bandit-Scripts/DefaultInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputActions"",
    ""maps"": [
        {
            ""name"": ""Presses"",
            ""id"": ""e8b8eb4c-08de-4d14-a4c9-5fbf065b9e75"",
            ""actions"": [
                {
                    ""name"": ""First Button"",
                    ""type"": ""Button"",
                    ""id"": ""b0dd12e2-3181-4943-8b20-a6506dd057c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Second Button"",
                    ""type"": ""Button"",
                    ""id"": ""424e3447-56d5-4d89-89de-0ca5647e8dbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d61abe40-e022-4aa7-8669-d7c3e6bc1f7e"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""First Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcdfda9b-106c-4835-98a6-c9239c5aebbe"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Second Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Presses
        m_Presses = asset.FindActionMap("Presses", throwIfNotFound: true);
        m_Presses_FirstButton = m_Presses.FindAction("First Button", throwIfNotFound: true);
        m_Presses_SecondButton = m_Presses.FindAction("Second Button", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Presses
    private readonly InputActionMap m_Presses;
    private IPressesActions m_PressesActionsCallbackInterface;
    private readonly InputAction m_Presses_FirstButton;
    private readonly InputAction m_Presses_SecondButton;
    public struct PressesActions
    {
        private @DefaultInputActions m_Wrapper;
        public PressesActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstButton => m_Wrapper.m_Presses_FirstButton;
        public InputAction @SecondButton => m_Wrapper.m_Presses_SecondButton;
        public InputActionMap Get() { return m_Wrapper.m_Presses; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PressesActions set) { return set.Get(); }
        public void SetCallbacks(IPressesActions instance)
        {
            if (m_Wrapper.m_PressesActionsCallbackInterface != null)
            {
                @FirstButton.started -= m_Wrapper.m_PressesActionsCallbackInterface.OnFirstButton;
                @FirstButton.performed -= m_Wrapper.m_PressesActionsCallbackInterface.OnFirstButton;
                @FirstButton.canceled -= m_Wrapper.m_PressesActionsCallbackInterface.OnFirstButton;
                @SecondButton.started -= m_Wrapper.m_PressesActionsCallbackInterface.OnSecondButton;
                @SecondButton.performed -= m_Wrapper.m_PressesActionsCallbackInterface.OnSecondButton;
                @SecondButton.canceled -= m_Wrapper.m_PressesActionsCallbackInterface.OnSecondButton;
            }
            m_Wrapper.m_PressesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FirstButton.started += instance.OnFirstButton;
                @FirstButton.performed += instance.OnFirstButton;
                @FirstButton.canceled += instance.OnFirstButton;
                @SecondButton.started += instance.OnSecondButton;
                @SecondButton.performed += instance.OnSecondButton;
                @SecondButton.canceled += instance.OnSecondButton;
            }
        }
    }
    public PressesActions @Presses => new PressesActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPressesActions
    {
        void OnFirstButton(InputAction.CallbackContext context);
        void OnSecondButton(InputAction.CallbackContext context);
    }
}
